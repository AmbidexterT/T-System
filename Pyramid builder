public int[][] buildPyramid(List<Integer> inputNumbers) {
    boolean flag;// Flag for the possibility / impossibility of building a pyramid
    int[][]matrix;// The resulting matrix


    System.out.println("Entered sequence:" + inputNumbers);

    int size = inputNumbers.size();// Check the size of the resulting array

    
// Check if the given number is triangular
    int count = 0;int rows = 1;int cols = 1;
    while(count < size){
       count=count+rows;
       rows++;
       cols=cols+2;
    }
    rows = rows-1;// Actual number of lines
    cols = cols-2;// Actual number of columns

    if(size==count) {
        flag = true;// If possible build a matrix
    }else flag = false;
    
if (flag) {
    List<Integer> sorted = inputNumbers.stream().sorted().collect(Collectors.toList());
    System.out.println("Sorted ascending sequence:" + sorted);
    System.out.println("Number of elements in sequence:" + size);
    System.out.println("The number of columns (cols) of the matrix will be equal to:" + cols);
    System.out.println("The number of rows of the matrix will be:" + rows);

    / ******* FILLING THE MATRIX BY ZERO ******* /
    matrix = new int[rows][cols];// Set the dimension to the matrix
    for (int[] row : matrix) {
        Arrays.fill(row, 0);
    }

    / ******* BUILDING A TRIANGLE ******* /
    int center = (cols / 2);// Find the center point of the matrix
    count = 1; // how many numbers will be in the line
    int arrIdx = 0; // array index

    for (int i = 0, offset = 0; i < rows; i++, offset++, count++) {
        int start = center - offset;
        for (int j = 0; j < count * 2; j +=2, arrIdx++) {
            matrix[i][start + j] = sorted.get(arrIdx);
        }
    }

    / ******** DISPLAY THE MATRIX ON THE SCREEN ******* /
    for(int [] a: matrix)// display the matrix on the screen
    {
        for(int b: a)
            System.out.print(b+" ");
        System.out.println();
    }
}// Throw An Exception
else{
     throw new CannotBuildPyramidException();
}

/*
 * Сервис задач и уведомлений
 *
 * API сервиса для получения и создания задач и отправки уведомлений
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Поиск по ID задачи
        /// </summary>
        /// <remarks>Поиск по ID задачи</remarks>
        /// <param name="id">ID задачи</param>
        /// <response code="200">Задача найдена</response>
        /// <response code="404">  * Задача с указанным id не найдена</response>
        [HttpGet]
        [Route("/api/task/id")]
        [ValidateModelState]
        [SwaggerOperation("GetTaskById")]
        public virtual IActionResult GetTaskById([FromQuery]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Поиск всех задач, назначенные на указанного пользователя, по табельному номеру или ФИО
        /// </summary>
        /// <remarks>Поиск всех задач, назначенные на указанного пользователя, по табельному номеру или ФИО</remarks>
        /// <param name="serviceNumber">Табельный номер</param>
        /// <param name="code">Код подразделения</param>
        /// <param name="firstName">Имя</param>
        /// <param name="lastName">Фамилия</param>
        /// <param name="middleName">Отчество</param>
        /// <param name="limit">Количество</param>
        /// <param name="offset">Смещение</param>
        /// <response code="200">Список получен успешно</response>
        /// <response code="404"> * Сотрудника с данным табельным номером и кодом подразделения не сущестует * Не удалось однозначно идентифицировать сотрудника * Для пользователя с данным userId не найдено задач </response>
        [HttpGet]
        [Route("/api/task/assigneebySN")]
        [ValidateModelState]
        [SwaggerOperation("GetTaskBySN")]
        public virtual IActionResult GetTaskBySN([FromQuery]string serviceNumber, [FromQuery]string code, [FromQuery]string firstName, [FromQuery]string lastName, [FromQuery]string middleName, [FromQuery]int? limit, [FromQuery]int? offset)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Список всех задач с заданными количеством(limit) и смещением(offset)
        /// </summary>
        /// <remarks>Список всех задач с заданными количеством(limit) и смещением(offset)</remarks>
        /// <param name="limit">Количество</param>
        /// <param name="offset">Смещение</param>
        /// <response code="200">Список получен успешно</response>
        [HttpGet]
        [Route("/api/task/list")]
        [ValidateModelState]
        [SwaggerOperation("GetTasks")]
        public virtual IActionResult GetTasks([FromQuery]int? limit, [FromQuery]int? offset)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Поиск всех задач, назначенные данным пользователем, по табельному номеру или ФИО
        /// </summary>
        /// <remarks>Поиск всех задач, назначенные данным пользователем, по табельному номеру или ФИО</remarks>
        /// <param name="serviceNumber">Табельный номер</param>
        /// <param name="code">Код подразделения</param>
        /// <param name="firstName">Имя</param>
        /// <param name="lastName">Фамилия</param>
        /// <param name="middleName">Отчество</param>
        /// <param name="limit">Количество</param>
        /// <param name="offset">Смещение</param>
        /// <response code="200">Список получен успешно</response>
        /// <response code="404"> * Сотрудника с данным табельным номером и кодом подразделения не сущестует * Сотрудник с данным табельным номером и кодом подразделения не является пользователем нашей системы * Сотрудника с данным именем не существует * Сотрудник с данным ФИО не является пользователем нашей системы</response>
        [HttpGet]
        [Route("/api/task/appointee")]
        [ValidateModelState]
        [SwaggerOperation("GetappointedTask")]
        public virtual IActionResult GetappointedTask([FromQuery]string serviceNumber, [FromQuery]string code, [FromQuery]string firstName, [FromQuery]string lastName, [FromQuery]string middleName, [FromQuery]int? limit, [FromQuery]int? offset)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Отправка уведомления сотруднику
        /// </summary>
        /// <remarks>Отправка уведомления сотруднику</remarks>
        /// <param name="body"></param>
        /// <response code="201">Уведомление отправлено успешно</response>
        /// <response code="404"> * Сотрудника с данным табельным номером и userId не сущестует * Не удалось однозначно идентифицировать сотрудника * Сотрудник с данным табельным номером и userId не является пользователем нашей системы </response>
        [HttpPost]
        [Route("/api/task/notify")]
        [ValidateModelState]
        [SwaggerOperation("NotifyPost")]
        public virtual IActionResult NotifyPost([FromBody]Notify body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Создание задачи на пользователя
        /// </summary>
        /// <remarks>Создание задачи на пользователя</remarks>
        /// <param name="body"></param>
        /// <response code="201">Задача создана</response>
        /// <response code="404">  * Не передан userId * Не существует пользователя с указанным userId</response>
        [HttpPost]
        [Route("/api/task/")]
        [ValidateModelState]
        [SwaggerOperation("PostTask")]
        public virtual IActionResult PostTask([FromBody]Post body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
